

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'


# Define Variables
variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa 


# Stage-1: Validate Stage
## Step-1: Install Latest Terraform (Ideally not needed if we use default Agents)
## Step-2: Validate Terraform Manifests

stages:
- stage: Validate
  jobs:
  - job: ValidateJob
    continueOnError: false
    steps:
      - publish: terraform-manifests
        artifact: terraform-manifests-out
      - task: TerraformInstaller@0
        displayName: Terraform Installer
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-for-pipe3'
          backendAzureRmResourceGroupName: 'terraform-state-storage-rg2'
          backendAzureRmStorageAccountName: 'tfstatekalyan123'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false
       



# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Download Secure File
## Step-2: Terraform Initialize (State Storage to store in Azure Storage Account)
## Step-3: Terraform Plan 
## Step-4: Terraform Apply
- stage: DeployAKS
  jobs:
  - deployment: DeployDev
    pool:
      vmImage: 'ubuntu-latest'
    environment: $(DEV_ENVIRONMENT)
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: Download SSH Key for Linux VMs
            name: sshkey
            inputs:
              secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-azurerm-for-pipe3'
              backendAzureRmResourceGroupName: 'terraform-state-storage-rg2'
              backendAzureRmStorageAccountName: 'tfstatekalyan123'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
              allowTelemetryCollection: false

          - task: TerraformCLI@0
            displayName: Terraform Plan
            inputs:
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terraform-aks-azurerm-for-pipe3'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false
              
          - task: TerraformCLI@0
            displayName: Terraform Apply
            inputs:
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terraform-aks-azurerm-for-pipe3'
              commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false

# Stage-2: Deploy Stages for Dev & QA
# Deployment-2: Deploy QA AKS Cluster
## Step-1: Download Secure File
## Step-2: Terraform Initialize (State Storage to store in Azure Storage Account)
## Step-3: Terraform Plan 
## Step-4: Terraform Apply              

  - deployment: DeployQA
    dependsOn: DeployDev
    pool:
      vmImage: 'ubuntu-latest'
    environment: $(QA_ENVIRONMENT)
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: Download SSH Key for Linux VMs
            name: sshkey
            inputs:
              secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-azurerm-for-pipe3'
              backendAzureRmResourceGroupName: 'terraform-state-storage-rg2'
              backendAzureRmStorageAccountName: 'tfstatekalyan123'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: 'aks-$(QA_ENVIRONMENT).tfstate'
              allowTelemetryCollection: false

          - task: TerraformCLI@0
            displayName: Terraform Plan
            inputs:
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terraform-aks-azurerm-for-pipe3'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(QA_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false
              
          - task: TerraformCLI@0
            displayName: Terraform Apply
            inputs:
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terraform-aks-azurerm-for-pipe3'
              commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false
